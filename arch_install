#!/usr/bin/env sh

# Shell script to automate Arch Linux's installation. It can be executed
# by running the following command inside a live media environment:
#
#   sh <(curl -Ls git.io/vzWco)

# Exits if any command or pipe fails, or if variables are unset.
set -e -u -o pipefail

# Wrapping the script inside curly brackets ensures it will be executed only
# if the closing bracket is reached, preventing undesired behavior if the
# connection is terminated when the script is being downloaded.
{

  prompt() {
    printf "%s" "$1"
    while read -r VAR ; do
      if echo "$VAR" | grep -Eqx "$3" ; then
        eval "$2='$VAR'"
        break
      else
        printf "Invalid input! Try again: "
      fi
    done
  }

  { # disk partitioning
    echo "Available disks:"
    lsblk -dn -e 2,7,11 -p -o NAME,SIZE | column
    prompt "Choose the disk: " DISK "$(lsblk -dn -e 2,7,11 -p -o NAME)"

    MAX="$(lsblk -dn -e 2,7,11 -b -o SIZE "$DISK")"
    HUMAN="$(echo "$MAX" | numfmt --to=iec)"
    printf "Set the root partition size (max. %s): " "$HUMAN"

    while read -r ROOTSIZE ; do
      if [ "$MAX" -gt "$(echo "$ROOTSIZE" | numfmt --from=iec)" ] ; then
        break
      else
        printf "Invalid input! Try again: "
      fi
    done

    [ -d "/sys/firmware/efi" ] && LABEL="gpt" || LABEL="msdos"

    parted -s --align optimal -- "$DISK" mklabel "$LABEL" \
      mkpart primary fat32 1M 50M \
      set 1 boot on \
      mkpart primary ext3 50M "$ROOTSIZE" \
      mkpart primary ext3 "$ROOTSIZE" 100%

    mkfs.vfat -F32 "${DISK}1"
    mkfs.ext4 "${DISK}2"
    mkfs.ext4 "${DISK}3"

    mount "${DISK}2" /mnt
    mkdir -p /mnt/boot
    mount "${DISK}1" /mnt/boot
  }

  { # mirror configuration and base system install
    MIRROR="$(curl -kLs "archlinux.org/mirrorlist/?use_mirror_status=on")"
    VALID_LOCATIONS="$(echo "$MIRROR" \
      | awk -F", " '/Score/ {print $2}' \
      | sort -u)"
    echo "Countries that host mirrors:"
    echo "$VALID_LOCATIONS" | column

    prompt "Country (or nearest location): " COUNTRY "$VALID_LOCATIONS"
    echo "$MIRROR" | sed "/$COUNTRY/{n;s/#S/S/}" > /etc/pacman.d/mirrorlist

    pacstrap /mnt base base-devel bash-completion expac pkgfile bc grub
    genfstab -U -p /mnt >> /mnt/etc/fstab
  }

  { # locale and timezone configuration
    VALID_LOCALES="$(sed 's/\#//' /etc/locale.gen \
      | grep -Eo "[a-z]{2,}_[A-Z]{2}" \
      | sort -u)"
    echo "Available locales:"
    echo "$VALID_LOCALES" | column

    prompt "Locale for the system: " LOCALE "$VALID_LOCALES"
    sed -i "s/#$LOCALE/$LOCALE/" /mnt/etc/locale.gen

    arch-chroot /mnt locale-gen
    echo "LANG=$(grep -m1 "$LOCALE" /mnt/etc/locale.gen \
      | cut -d" " -f1)" > /mnt/etc/locale.conf

    TIMEZONE="$(tzselect)"
    ln -s "/usr/share/zoneinfo/$TIMEZONE" /mnt/etc/localtime
    arch-chroot /mnt hwclock --systohc --utc
  }

  { # hostname, user account and password configuration
    PATTERN="[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]"
    prompt "Enter the hostname: " HOST "($PATTERN)(\.($PATTERN)){0,3}"
    echo "$HOST" > /mnt/etc/hostname

    echo "Password for superuser:"
    arch-chroot /mnt passwd

    VALID_NAMES="[a-z_]([a-z0-9_]{,30}[$]|[a-z0-9_]{,31})"
    prompt "Enter the username: " USER "$VALID_NAMES"
    arch-chroot /mnt useradd -m -g users -G wheel "$USER"

    echo "Password for $USER:"
    arch-chroot /mnt passwd "$USER"
    sed -i "0,/# %w/s/# %w/%w/" /mnt/etc/sudoers
  }

  { # bootloader installation
    if [ -d "/sys/firmware/efi" ] ; then
      pacman -r /mnt -S --noconfirm efibootmgr
      arch-chroot /mnt grub-install --target=x86_64-efi \
        --efi-directory=/boot --bootloader-id=boot
    else
      arch-chroot /mnt grub-install --target=i386-pc "$DISK"
    fi
    arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
  }

}
